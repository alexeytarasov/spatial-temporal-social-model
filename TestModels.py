import datetimeimport unittestfrom Models import Modelclass TestModel(unittest.TestCase):    def setUp(self):        self.model = Model()    def test_produce_initial_check_in_assignment_correct_clustering(self):        check_ins = [                {'venue_id': '41059b00f964a520850b1fe3', 'latitude': 37.6164, 'check_in_message': 'empty_message', 'check_in_id': '12', 'longitude': -122.386, 'date': datetime.datetime(2012, 7, 18, 14, 43, 38)},                {'venue_id': '41059b00f964a520850b1fe3', 'latitude': 50.6164, 'check_in_message': 'empty_message', 'check_in_id': '14', 'longitude': 122.386, 'date': datetime.datetime(2012, 7, 18, 14, 43, 38)},                {'venue_id': '41059b00f964a520850b1fe3', 'latitude': 51, 'check_in_message': 'empty_message', 'check_in_id': '15', 'longitude': 120.386, 'date': datetime.datetime(2012, 7, 18, 14, 43, 38)},                {'venue_id': '41059b00f964a520850b1fe3', 'latitude': 35, 'check_in_message': 'empty_message', 'check_in_id': '13', 'longitude': -120.386, 'date': datetime.datetime(2012, 7, 18, 14, 43, 38)}        ]        cluster1, cluster2 = self.model.produce_initial_check_in_assignment(check_ins)        expected_cluster1 = [{'venue_id': '41059b00f964a520850b1fe3', 'date': datetime.datetime(2012, 7, 18, 14, 43, 38), 'longitude': 122.386, 'check_in_id': '14', 'check_in_message': 'empty_message', 'latitude': 50.6164}, {'venue_id': '41059b00f964a520850b1fe3', 'date': datetime.datetime(2012, 7, 18, 14, 43, 38), 'longitude': 120.386, 'check_in_id': '15', 'check_in_message': 'empty_message', 'latitude': 51}]        expected_cluster2 = [{'venue_id': '41059b00f964a520850b1fe3', 'date': datetime.datetime(2012, 7, 18, 14, 43, 38), 'longitude': -122.386, 'check_in_id': '12', 'check_in_message': 'empty_message', 'latitude': 37.6164}, {'venue_id': '41059b00f964a520850b1fe3', 'date': datetime.datetime(2012, 7, 18, 14, 43, 38), 'longitude': -120.386, 'check_in_id': '13', 'check_in_message': 'empty_message', 'latitude': 35}]        self.assertTrue((cluster1 == expected_cluster1 and cluster2 == expected_cluster2) or (cluster1 == expected_cluster2 and cluster2 == expected_cluster1))            def test_produce_initial_check_in_assignment_duplicate_ids(self):        check_ins = [                {'venue_id': '41059b00f964a520850b1fe3', 'latitude': 37.6164, 'check_in_message': 'empty_message', 'check_in_id': '12', 'longitude': -122.386, 'date': datetime.datetime(2012, 7, 18, 14, 43, 38)},                {'venue_id': '41059b00f964a520850b1fe3', 'latitude': 50.6164, 'check_in_message': 'empty_message', 'check_in_id': '14', 'longitude': 122.386, 'date': datetime.datetime(2012, 7, 18, 14, 43, 38)},                {'venue_id': '41059b00f964a520850b1fe3', 'latitude': 51, 'check_in_message': 'empty_message', 'check_in_id': '12', 'longitude': 120.386, 'date': datetime.datetime(2012, 7, 18, 14, 43, 38)},                {'venue_id': '41059b00f964a520850b1fe3', 'latitude': 35, 'check_in_message': 'empty_message', 'check_in_id': '13', 'longitude': -120.386, 'date': datetime.datetime(2012, 7, 18, 14, 43, 38)}        ]        with self.assertRaises(ValueError) as cm:            self.model.produce_initial_check_in_assignment(check_ins)        self.assertEqual(cm.exception.message, "Error: some check-ins have same IDs!")    def test_produce_initial_check_in_assignment_no_id(self):        check_ins = [                {'venue_id': '41059b00f964a520850b1fe3', 'latitude': 37.6164, 'check_in_message': 'empty_message', 'check_in_id': '12', 'longitude': -122.386, 'date': datetime.datetime(2012, 7, 18, 14, 43, 38)},                {'venue_id': '41059b00f964a520850b1fe3', 'latitude': 50.6164, 'check_in_message': 'empty_message', 'longitude': 122.386, 'date': datetime.datetime(2012, 7, 18, 14, 43, 38)},                {'venue_id': '41059b00f964a520850b1fe3', 'latitude': 51, 'check_in_message': 'empty_message', 'check_in_id': '12', 'longitude': 120.386, 'date': datetime.datetime(2012, 7, 18, 14, 43, 38)},                {'venue_id': '41059b00f964a520850b1fe3', 'latitude': 35, 'check_in_message': 'empty_message', 'check_in_id': '13', 'longitude': -120.386, 'date': datetime.datetime(2012, 7, 18, 14, 43, 38)}        ]        with self.assertRaises(ValueError) as cm:            self.model.produce_initial_check_in_assignment(check_ins)        self.assertEqual(cm.exception.message, "Error: one of check-ins does not have ID!")    def test_produce_initial_check_in_assignment_no_latitude(self):        check_ins = [                {'venue_id': '41059b00f964a520850b1fe3', 'check_in_message': 'empty_message', 'check_in_id': '12', 'longitude': -122.386, 'date': datetime.datetime(2012, 7, 18, 14, 43, 38)},                {'venue_id': '41059b00f964a520850b1fe3', 'latitude': 51, 'check_in_message': 'empty_message', 'check_in_id': '12', 'longitude': 120.386, 'date': datetime.datetime(2012, 7, 18, 14, 43, 38)},                {'venue_id': '41059b00f964a520850b1fe3', 'latitude': 35, 'check_in_message': 'empty_message', 'check_in_id': '13', 'longitude': -120.386, 'date': datetime.datetime(2012, 7, 18, 14, 43, 38)}        ]        with self.assertRaises(ValueError) as cm:            self.model.produce_initial_check_in_assignment(check_ins)        self.assertEqual(cm.exception.message, "Error: check-in 12 does not have latitude!")    def test_produce_initial_check_in_assignment_no_longitude(self):        check_ins = [                {'venue_id': '41059b00f964a520850b1fe3', 'latitude': 51, 'check_in_message': 'empty_message', 'check_in_id': '12', 'longitude': 120.386, 'date': datetime.datetime(2012, 7, 18, 14, 43, 38)},                {'venue_id': '41059b00f964a520850b1fe3', 'latitude': 35, 'check_in_message': 'empty_message', 'check_in_id': '13', 'date': datetime.datetime(2012, 7, 18, 14, 43, 38)}        ]        with self.assertRaises(ValueError) as cm:            self.model.produce_initial_check_in_assignment(check_ins)        self.assertEqual(cm.exception.message, "Error: check-in 13 does not have longitude!")    def test_produce_initial_check_in_assignment_empty_list(self):        check_ins = []        with self.assertRaises(ValueError) as cm:            self.model.produce_initial_check_in_assignment(check_ins)        self.assertEqual(cm.exception.message, "Error: the list of check-ins is empty!")    def test_produce_initial_check_in_assignment_one_check_in(self):        check_ins = ["check-in"]        with self.assertRaises(ValueError) as cm:            self.model.produce_initial_check_in_assignment(check_ins)        self.assertEqual(cm.exception.message, "Error: the list should contain at least two check-ins!")    def test_produce_initial_check_in_assignment_invalid_list(self):        check_ins = []        with self.assertRaises(ValueError) as cm:            self.model.produce_initial_check_in_assignment(1)        self.assertEqual(cm.exception.message, "Error: the input argument is not a valid list!")if __name__ == '__main__':    unittest.main()