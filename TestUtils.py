import datetimeimport unittestfrom Utils import Utilsclass TestUtils(unittest.TestCase):    def test_check_check_in_syntax_not_dict(self):        with self.assertRaises(ValueError) as cm:            Utils.check_check_in_syntax(12)        self.assertEqual(cm.exception.message, "Check-in should be a dictionary!")    def test_check_check_in_syntax_happy_path(self):        check_in = {            'venue_id': '41059b00f964a520850b1fe3',             'latitude': 51,             'check_in_id': '12',             'longitude': 120.386,             'date': datetime.datetime(2012, 7, 18, 14, 43, 38),            'some_additional_attribute': 'some_value'        }        Utils.check_check_in_syntax(check_in)        pass    def test_check_check_in_syntax_missing_attributes(self):        check_in = {            'latitude': 51,             'check_in_id': '12',             'longitude': 120.386,             'date': datetime.datetime(2012, 7, 18, 14, 43, 38),            'some_additional_attribute': 'some_value'        }        with self.assertRaises(ValueError) as cm:            Utils.check_check_in_syntax(check_in)        self.assertEqual(cm.exception.message, "Check-in should contain venue_id!")        check_in = {            'venue_id': '41059b00f964a520850b1fe3',             'check_in_id': '12',             'longitude': 120.386,             'date': datetime.datetime(2012, 7, 18, 14, 43, 38),            'some_additional_attribute': 'some_value'        }        with self.assertRaises(ValueError) as cm:            Utils.check_check_in_syntax(check_in)        self.assertEqual(cm.exception.message, "Error: check-in 12 does not have latitude!")        check_in = {            'venue_id': '41059b00f964a520850b1fe3',             'latitude': 51,             'check_in_id': '12',             'date': datetime.datetime(2012, 7, 18, 14, 43, 38),            'some_additional_attribute': 'some_value'        }        with self.assertRaises(ValueError) as cm:            Utils.check_check_in_syntax(check_in)        self.assertEqual(cm.exception.message, "Error: check-in 12 does not have longitude!")        check_in = {            'venue_id': '41059b00f964a520850b1fe3',             'latitude': 51,             'longitude': 120.386,             'date': datetime.datetime(2012, 7, 18, 14, 43, 38),            'some_additional_attribute': 'some_value'        }        with self.assertRaises(ValueError) as cm:            Utils.check_check_in_syntax(check_in)        self.assertEqual(cm.exception.message, "Check-in should contain check_in_id!")        check_in = {            'venue_id': '41059b00f964a520850b1fe3',             'latitude': 51,             'check_in_id': '12',             'longitude': 120.386,             'some_additional_attribute': 'some_value'        }        with self.assertRaises(ValueError) as cm:            Utils.check_check_in_syntax(check_in)        self.assertEqual(cm.exception.message, "Check-in should contain date!")    def test_check_check_in_syntax_invalid_attributes(self):        check_in = {            'venue_id': '41059b00f964a520850b1fe3',             'latitude': '15a',             'check_in_id': '12',             'longitude': 120.386,             'date': datetime.datetime(2012, 7, 18, 14, 43, 38),            'some_additional_attribute': 'some_value'        }        with self.assertRaises(ValueError) as cm:            Utils.check_check_in_syntax(check_in)        self.assertEqual(cm.exception.message, "Check-in has invalid latitude!")        check_in = {            'venue_id': '41059b00f964a520850b1fe3',             'latitude': 51,             'check_in_id': '12',             'longitude': None,             'date': datetime.datetime(2012, 7, 18, 14, 43, 38),            'some_additional_attribute': 'some_value'        }        with self.assertRaises(ValueError) as cm:            Utils.check_check_in_syntax(check_in)        self.assertEqual(cm.exception.message, "Check-in has invalid longitude!")    def test_check_userless_check_in_list_duplicate_ids(self):        check_ins = [                {'venue_id': '41059b00f964a520850b1fe3', 'latitude': 37.6164, 'check_in_message': 'empty_message', 'check_in_id': '12', 'longitude': -122.386, 'date': datetime.datetime(2012, 7, 18, 14, 43, 38)},                {'venue_id': '41059b00f964a520850b1fe3', 'latitude': 50.6164, 'check_in_message': 'empty_message', 'check_in_id': '14', 'longitude': 122.386, 'date': datetime.datetime(2012, 7, 18, 14, 43, 38)},                {'venue_id': '41059b00f964a520850b1fe3', 'latitude': 51, 'check_in_message': 'empty_message', 'check_in_id': '12', 'longitude': 120.386, 'date': datetime.datetime(2012, 7, 18, 14, 43, 38)},                {'venue_id': '41059b00f964a520850b1fe3', 'latitude': 35, 'check_in_message': 'empty_message', 'check_in_id': '13', 'longitude': -120.386, 'date': datetime.datetime(2012, 7, 18, 14, 43, 38)}        ]        with self.assertRaises(ValueError) as cm:            Utils.check_userless_check_in_list(check_ins)        self.assertEqual(cm.exception.message, "Error: some check-ins have same IDs!")    def test_check_userless_check_in_list_no_id(self):        check_ins = [                {'venue_id': '41059b00f964a520850b1fe3', 'latitude': 37.6164, 'check_in_message': 'empty_message', 'check_in_id': '12', 'longitude': -122.386, 'date': datetime.datetime(2012, 7, 18, 14, 43, 38)},                {'venue_id': '41059b00f964a520850b1fe3', 'latitude': 50.6164, 'check_in_message': 'empty_message', 'longitude': 122.386, 'date': datetime.datetime(2012, 7, 18, 14, 43, 38)},                {'venue_id': '41059b00f964a520850b1fe3', 'latitude': 51, 'check_in_message': 'empty_message', 'check_in_id': '12', 'longitude': 120.386, 'date': datetime.datetime(2012, 7, 18, 14, 43, 38)},                {'venue_id': '41059b00f964a520850b1fe3', 'latitude': 35, 'check_in_message': 'empty_message', 'check_in_id': '13', 'longitude': -120.386, 'date': datetime.datetime(2012, 7, 18, 14, 43, 38)}        ]        with self.assertRaises(ValueError) as cm:            Utils.check_userless_check_in_list(check_ins)        self.assertEqual(cm.exception.message, "Check-in should contain check_in_id!")    def test_check_userless_check_in_list_no_latitude(self):        check_ins = [                {'venue_id': '41059b00f964a520850b1fe3', 'check_in_message': 'empty_message', 'check_in_id': '12', 'longitude': -122.386, 'date': datetime.datetime(2012, 7, 18, 14, 43, 38)},                {'venue_id': '41059b00f964a520850b1fe3', 'latitude': 51, 'check_in_message': 'empty_message', 'check_in_id': '12', 'longitude': 120.386, 'date': datetime.datetime(2012, 7, 18, 14, 43, 38)},                {'venue_id': '41059b00f964a520850b1fe3', 'latitude': 35, 'check_in_message': 'empty_message', 'check_in_id': '13', 'longitude': -120.386, 'date': datetime.datetime(2012, 7, 18, 14, 43, 38)}        ]        with self.assertRaises(ValueError) as cm:            Utils.check_userless_check_in_list(check_ins)        self.assertEqual(cm.exception.message, "Error: check-in 12 does not have latitude!")    def test_check_userless_check_in_list_no_longitude(self):        check_ins = [                {'venue_id': '41059b00f964a520850b1fe3', 'latitude': 51, 'check_in_message': 'empty_message', 'check_in_id': '12', 'longitude': 120.386, 'date': datetime.datetime(2012, 7, 18, 14, 43, 38)},                {'venue_id': '41059b00f964a520850b1fe3', 'latitude': 35, 'check_in_message': 'empty_message', 'check_in_id': '13', 'date': datetime.datetime(2012, 7, 18, 14, 43, 38)}        ]        with self.assertRaises(ValueError) as cm:            Utils.check_userless_check_in_list(check_ins)        self.assertEqual(cm.exception.message, "Error: check-in 13 does not have longitude!")    def test_check_userless_check_in_list_empty_list(self):        check_ins = []        with self.assertRaises(ValueError) as cm:            Utils.check_userless_check_in_list(check_ins)        self.assertEqual(cm.exception.message, "Error: the list of check-ins is empty!")    def test_check_userless_check_in_list_one_check_in(self):        check_ins = ["check-in"]        with self.assertRaises(ValueError) as cm:            Utils.check_userless_check_in_list(check_ins)        self.assertEqual(cm.exception.message, "Error: the list should contain at least two check-ins!")    def test_check_userless_check_in_list_invalid_list(self):        check_ins = None        with self.assertRaises(ValueError) as cm:            Utils.check_userless_check_in_list(1)        self.assertEqual(cm.exception.message, "Error: the input argument is not a valid list!")        check_ins = 1        with self.assertRaises(ValueError) as cm:            Utils.check_userless_check_in_list(1)        self.assertEqual(cm.exception.message, "Error: the input argument is not a valid list!")if __name__ == '__main__':    unittest.main()